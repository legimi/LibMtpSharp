//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright © 2006-2010 Travis Robinson. All rights reserved.
// Copyright © 2011-2023 LibUsbDotNet contributors. All rights reserved.
// 
// website: http://github.com/libusbdotnet/libusbdotnet
// 
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation; either version 2 of the License, or 
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful, but 
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
// 
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA. or 
// visit www.gnu.org.
// 
//

using LibMtpSharpStandardMacOS.Usb;
using LibMtpSharpStandardMacOS.Structs;
using System;
using System.Runtime.InteropServices;

namespace LibMtpSharpStandardMacOS.NativeAPI
{
    internal static unsafe partial class UsbLibrary
    {
        /// <summary>
        /// Use the default struct alignment for this platform.
        /// </summary>
        internal const int Pack = 0;

        public const string LibUsbNativeLibrary = "libusb-1.0";

        static UsbLibrary()
        {
            NativeLibraryResolver.EnsureRegistered();
        }

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_init")]
        public static extern UsbError Init(ref IntPtr ctx);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_exit")]
        public static extern void Exit(IntPtr ctx);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_set_debug")]
        public static extern void SetDebug(Context ctx, int level);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_has_capability")]
        public static extern int HasCapability(uint capability);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_error_name")]
        public static extern IntPtr ErrorName(int errcode);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_setlocale")]
        public static extern UsbError SetLocale(IntPtr locale);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_strerror")]
        public static extern IntPtr StrError(UsbError errcode);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_get_device_list")]
        public static extern IntPtr GetDeviceList(Context ctx, ref IntPtr list);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_free_device_list")]
        public static extern void FreeDeviceList(ref IntPtr list, int unrefDevices);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_ref_device")]
        public static extern Device RefDevice(Device dev);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_unref_device")]
        public static extern void UnrefDevice(IntPtr dev);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_get_configuration")]
        public static extern UsbError GetConfiguration(DeviceHandle dev, ref int config);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_get_bus_number")]
        public static extern byte GetBusNumber(Device dev);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_get_port_number")]
        public static extern byte GetPortNumber(Device dev);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_get_port_numbers")]
        public static extern UsbError GetPortNumbers(Device dev, byte* portNumbers, int portNumbersLen);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_get_port_path")]
        public static extern UsbError GetPortPath(Context ctx, Device dev, byte* path, byte pathLength);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_get_parent")]
        public static extern Device GetParent(Device dev);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_get_device_address")]
        public static extern byte GetDeviceAddress(Device dev);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_get_max_packet_size")]
        public static extern int GetMaxPacketSize(Device dev, byte endpoint);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_get_max_iso_packet_size")]
        public static extern int GetMaxIsoPacketSize(Device dev, byte endpoint);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_open")]
        public static extern UsbError Open(Device dev, ref IntPtr devHandle);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_close")]
        public static extern void Close(IntPtr devHandle);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_get_device")]
        public static extern Device GetDevice(DeviceHandle devHandle);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_set_configuration")]
        public static extern UsbError SetConfiguration(DeviceHandle devHandle, int configuration);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_claim_interface")]
        public static extern UsbError ClaimInterface(DeviceHandle devHandle, int interfaceNumber);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_release_interface")]
        public static extern UsbError ReleaseInterface(DeviceHandle devHandle, int interfaceNumber);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_open_device_with_vid_pid")]
        public static extern DeviceHandle OpenDeviceWithVidPid(Context ctx, ushort vendorId, ushort productId);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_set_interface_alt_setting")]
        public static extern UsbError SetInterfaceAltSetting(DeviceHandle devHandle, int interfaceNumber, int alternateSetting);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_clear_halt")]
        public static extern UsbError ClearHalt(DeviceHandle devHandle, byte endpoint);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_reset_device")]
        public static extern UsbError ResetDevice(DeviceHandle devHandle);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_alloc_streams")]
        public static extern UsbError AllocStreams(DeviceHandle devHandle, uint numStreams, byte* endpoints, int numEndpoints);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_free_streams")]
        public static extern UsbError FreeStreams(DeviceHandle devHandle, byte* endpoints, int numEndpoints);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_dev_mem_alloc")]
        public static extern byte* DevMemAlloc(DeviceHandle devHandle, UIntPtr length);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_dev_mem_free")]
        public static extern UsbError DevMemFree(DeviceHandle devHandle, byte* buffer, UIntPtr length);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_kernel_driver_active")]
        public static extern UsbError KernelDriverActive(DeviceHandle devHandle, int interfaceNumber);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_detach_kernel_driver")]
        public static extern UsbError DetachKernelDriver(DeviceHandle devHandle, int interfaceNumber);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_attach_kernel_driver")]
        public static extern UsbError AttachKernelDriver(DeviceHandle devHandle, int interfaceNumber);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_set_auto_detach_kernel_driver")]
        public static extern UsbError SetAutoDetachKernelDriver(DeviceHandle devHandle, int enable);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_control_transfer")]
        public static extern int ControlTransfer(DeviceHandle devHandle, byte requestType, byte brequest, ushort wvalue, ushort windex, byte* data, ushort wlength, uint timeout);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_bulk_transfer")]
        public static extern UsbError BulkTransfer(DeviceHandle devHandle, byte endpoint, byte* data, int length, ref int actualLength, uint timeout);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_interrupt_transfer")]
        public static extern UsbError InterruptTransfer(DeviceHandle devHandle, byte endpoint, byte* data, int length, ref int actualLength, uint timeout);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_get_string_descriptor_ascii")]
        public static extern UsbError GetStringDescriptorAscii(DeviceHandle devHandle, byte descIndex, byte* data, int length);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_try_lock_events")]
        public static extern int TryLockEvents(Context ctx);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_lock_events")]
        public static extern void LockEvents(Context ctx);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_unlock_events")]
        public static extern void UnlockEvents(Context ctx);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_event_handling_ok")]
        public static extern int EventHandlingOk(Context ctx);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_event_handler_active")]
        public static extern int EventHandlerActive(Context ctx);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_interrupt_event_handler")]
        public static extern void InterruptEventHandler(Context ctx);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_lock_event_waiters")]
        public static extern void LockEventWaiters(Context ctx);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_unlock_event_waiters")]
        public static extern void UnlockEventWaiters(Context ctx);
        
        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_handle_events")]
        public static extern UsbError HandleEvents(Context ctx);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_handle_events_completed")]
        public static extern UsbError HandleEventsCompleted(Context ctx, ref int completed);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_set_pollfd_notifiers")]
        public static extern void SetPollfdNotifiers(Context ctx, IntPtr addedDelegate, IntPtr removedDelegate, IntPtr userData);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_hotplug_register_callback")]
        public static extern UsbError HotplugRegisterCallback(Context ctx, HotplugEvent events, HotplugFlag flags, int vendorId, int productId, int devClass, IntPtr Delegate, IntPtr userData, ref int callbackHandle);

        [DllImport(LibUsbNativeLibrary, EntryPoint = "libusb_hotplug_deregister_callback")]
        public static extern void HotplugDeregisterCallback(Context ctx, int callbackHandle);

    }
}
